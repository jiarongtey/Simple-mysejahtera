/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oodj.assignment.gui;

import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oodj.assignment.OODJAssignment;
import oodj.assignment.appointment.Appointment;
import oodj.assignment.appointment.AppointmentManager;
import oodj.assignment.location.LocationManager;
import oodj.assignment.user.User;
import oodj.assignment.user.UserManager;
import oodj.assignment.vaccine.SupplimentManager;

/**
 *
 * @author teyji
 */
public class AppointmentPage extends javax.swing.JFrame {

    private User user;
    private SupplimentManager supplimentManager;
    private AppointmentManager appointmentManager;
    private LocationManager locationManager;
    private UserManager userManager;
    private DefaultTableModel model;
    private Appointment tempAppointment;
    
    public AppointmentPage(User user) {
        initComponents();
        this.user = user;
        this.supplimentManager = OODJAssignment.supplimentManager;
        this.appointmentManager = OODJAssignment.appointmentManager;
        this.locationManager = OODJAssignment.locationManager;
        this.userManager = OODJAssignment.userManager;
        this.setLocationRelativeTo(null);
        
        this.model = (DefaultTableModel) table.getModel();
        this.locationManager.getLocations().forEach( location ->{
            this.areaTxt.addItem(location.getName());
        });
        
        updateTable();
        
        this.tempAppointment = null;
        
        
        
        
    }

    private String getStatus(int dose){
        String status;
        status = switch (dose) {
            case 1 -> "Registered";
            case 2 -> "1st Dose Completed";
            default -> "Fully Vaccined";
        };
        return status;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fDate = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        areaTxt = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        facilitytxt = new javax.swing.JLabel();
        locationTxt = new javax.swing.JLabel();
        fDateBtn = new javax.swing.JButton();
        sDateBtn = new javax.swing.JButton();
        vaccineTxt = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fDate.setBackground(new java.awt.Color(113, 223, 231));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 157, 174));
        jLabel1.setText("Appointment ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Name:");

        table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Area", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        areaTxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL" }));
        areaTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaTxtActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("First Dose Date:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Second Dose Date:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Vaccine Type:");

        nameTxt.setEnabled(false);

        jButton2.setText("Update Status");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Facility:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Location:");

        facilitytxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        facilitytxt.setForeground(new java.awt.Color(153, 153, 153));
        facilitytxt.setText("{fac}");

        locationTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        locationTxt.setForeground(new java.awt.Color(153, 153, 153));
        locationTxt.setText("{loc}");

        fDateBtn.setBackground(java.awt.Color.lightGray);
        fDateBtn.setEnabled(false);
        fDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fDateBtnActionPerformed(evt);
            }
        });

        sDateBtn.setBackground(java.awt.Color.lightGray);
        sDateBtn.setEnabled(false);
        sDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sDateBtnActionPerformed(evt);
            }
        });

        vaccineTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        vaccineTxt.setForeground(new java.awt.Color(153, 153, 153));
        vaccineTxt.setText("{vaccine}");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 204));
        jLabel8.setText("Back");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fDateLayout = new javax.swing.GroupLayout(fDate);
        fDate.setLayout(fDateLayout);
        fDateLayout.setHorizontalGroup(
            fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fDateLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fDateLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(fDateLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fDateLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(fDateLayout.createSequentialGroup()
                                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addGap(34, 34, 34)
                                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nameTxt)
                                            .addComponent(facilitytxt)
                                            .addComponent(locationTxt)
                                            .addComponent(fDateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(sDateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                            .addComponent(vaccineTxt))))
                                .addContainerGap(25, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fDateLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(areaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35))))))
        );
        fDateLayout.setVerticalGroup(
            fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fDateLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGap(37, 37, 37)
                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fDateLayout.createSequentialGroup()
                        .addComponent(areaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(fDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(sDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fDateLayout.createSequentialGroup()
                                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(fDateLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel5))
                                    .addGroup(fDateLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(vaccineTxt)))
                                .addGap(25, 25, 25)
                                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(facilitytxt))
                                .addGap(18, 18, 18)
                                .addGroup(fDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(locationTxt)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fDateLayout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        String name = (String) table.getValueAt(table.getSelectedRow(), 0);
        User user = userManager.getUserByName(name);
        Appointment appointment = appointmentManager.getAppointmentByUsername(user);
        this.nameTxt.setText(name);
        this.locationTxt.setText(appointment.getLocation());
        this.facilitytxt.setText(appointment.getFacility());
        this.vaccineTxt.setText(appointment.getVaccineType());
        appointmentBtn(appointment);
        this.tempAppointment = appointment;
        
    }//GEN-LAST:event_tableMouseClicked

    public void appointmentBtn(Appointment appointment){
        DateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd");  
        User user = appointment.getUser();
       this.fDateBtn.setBackground(Color.lightGray);
              this.sDateBtn.setBackground(Color.lightGray);

        if(appointment.getFirstDoseDate() == null){
            this.fDateBtn.setText("Set Date");
            this.fDateBtn.setEnabled(true);
        }else{
            if(user.getVaccineDetails().firstDoseCompleted()){
               
                this.fDateBtn.setText(dateFormat.format(appointment.getFirstDoseDate()));
                this.fDateBtn.setBackground(Color.GREEN);
                this.fDateBtn.setEnabled(false);
            }else{
                this.fDateBtn.setText(dateFormat.format(appointment.getFirstDoseDate()));
                this.fDateBtn.setBackground(Color.RED);
                this.fDateBtn.setEnabled(false);
            }
        }
        
        if(appointment.getSecondDoseDate() == null){
            if(user.getVaccineDetails().firstDoseCompleted()){
                this.sDateBtn.setText("Set Date");
                this.sDateBtn.setEnabled(true);
            }else{
                this.sDateBtn.setText("Incompleted First Dose");
                this.sDateBtn.setEnabled(false);
            }
        }else if(appointment.getSecondDoseDate() != null){
            if(user.getVaccineDetails().fullyVaccine()){
               
                this.sDateBtn.setText(dateFormat.format(appointment.getFirstDoseDate()));
                this.sDateBtn.setBackground(Color.GREEN);
                this.sDateBtn.setEnabled(false);
            }else{
                this.sDateBtn.setText(dateFormat.format(appointment.getFirstDoseDate()));
                this.sDateBtn.setBackground(Color.RED);
                this.sDateBtn.setEnabled(false);
            }
        }
    }
    
    public void updateTable(){
        // Filter
        String area = (String) this.areaTxt.getSelectedItem();
        this.model.setRowCount(0); // Remove all row
        
        if(area.equals("ALL")){
            this.appointmentManager.getAppointments().forEach(a -> {
            int dose = a.getUser().getVaccineDetails().completedDose();
            String status  = getStatus(dose);
            Object[] o = {a.getUser().getFullName().toUpperCase(), a.getLocation(), status};
            this.model.addRow(o);
        });
        }else{
            this.appointmentManager.getAppointments().forEach(a -> {
            if(a.getLocation().equalsIgnoreCase(area)){
                int dose = a.getUser().getVaccineDetails().completedDose();
                String status  = getStatus(dose);
                Object[] o = {a.getUser().getFullName().toUpperCase(), a.getLocation(), status};
                this.model.addRow(o);
            }
        });
        }
    }
    
    private void areaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaTxtActionPerformed
        updateTable();
       
    }//GEN-LAST:event_areaTxtActionPerformed

    private void fDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDateBtnActionPerformed
        if(this.tempAppointment != null){
            new DateChoosePage(this.tempAppointment,this,this.supplimentManager,1).setVisible(true);
        }
        
    }//GEN-LAST:event_fDateBtnActionPerformed

    private void sDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sDateBtnActionPerformed
        if(this.tempAppointment != null){
            new DateChoosePage(this.tempAppointment,this,this.supplimentManager,2).setVisible(true);
        }
    }//GEN-LAST:event_sDateBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(tempAppointment == null){
            return;
        }
        if(fDateBtn.getBackground() == Color.RED){
            if (JOptionPane.showConfirmDialog(null, "Do the patient came to vaccine?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                tempAppointment.getUser().getVaccineDetails().setCompletedDose(2);
                appointmentBtn(tempAppointment);
                updateTable();
            return;
            } else {
                return;
            }            
        }
        
        if(sDateBtn.getBackground()== Color.RED){
            if (JOptionPane.showConfirmDialog(null, "Do the patient came to vaccine?", "WARNING",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                tempAppointment.getUser().getVaccineDetails().setCompletedDose(3);
                appointmentBtn(tempAppointment);
                updateTable();
            return;
            } else {
                return;
            } 
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        new AdminPage(this.user).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> areaTxt;
    private javax.swing.JPanel fDate;
    private javax.swing.JButton fDateBtn;
    private javax.swing.JLabel facilitytxt;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel locationTxt;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JButton sDateBtn;
    private javax.swing.JTable table;
    private javax.swing.JLabel vaccineTxt;
    // End of variables declaration//GEN-END:variables
}
